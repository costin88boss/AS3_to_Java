package sample.ui.components.scroll{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		import sample.ui.components.Box;	import sample.ui.components.Component;		public class ScrollBar extends Component	{		private var decArrow:ScrollButton;		private var incArrow:ScrollButton;		private var scrollbg:Box;		private var tracker:ScrollTracker;				private var _scrollSize:Number = 1000;		private var _scrollViewable:Number = 200;		private var _scrollValue:Number = 0;				private var scrollListener:Function		private var _mouseY:Number		private var _mouseX:Number				private var pixelSize:int = 10;				private var _horizontal:Boolean = false;				function ScrollBar(horizontal:Boolean = false, fill:uint = 0x000000)		{			_horizontal = horizontal;						decArrow = new ScrollButton((_horizontal == true) ? 2 : 1,pixelSize-1,decScroll);			incArrow = new ScrollButton((_horizontal == true) ? 0 : 3,pixelSize-1,incScroll);			scrollbg = new Box().fill(fill,1,3);			tracker = new ScrollTracker();						scrollbg.addEventListener(MouseEvent.MOUSE_DOWN, function(e:MouseEvent):void			{				if (!_horizontal)				{					if(scrollbg.mouseY > tracker.y){						incScrollJump();					}else{						decScrollJump();					}				}				else				{					if(scrollbg.mouseX > tracker.x){						incScrollJump();					}					else{						decScrollJump();					}				}			})							tracker.addEventListener(MouseEvent.MOUSE_DOWN, function(e:MouseEvent):void			{				if (!_horizontal)					_mouseY = tracker.mouseY;				else					_mouseX = tracker.mouseX;								tracker.addEventListener(Event.ENTER_FRAME, handleMove);								stage.addEventListener(MouseEvent.MOUSE_UP, function(e:MouseEvent):void				{					tracker.removeEventListener(Event.ENTER_FRAME, handleMove);					stage.removeEventListener(MouseEvent.MOUSE_UP, arguments.callee);				});								function handleMove(e:Event):void				{					if (!_horizontal)						changeByPx(tracker.mouseY - _mouseY);					else						changeByPx(tracker.mouseX - _mouseX);										//_mouseY = tracker.mouseY					if(tracker.upState.parent)					{						tracker.removeEventListener(Event.ENTER_FRAME, handleMove);					}				}			});						addChild(scrollbg);			addChild(tracker);			addChild(decArrow)			addChild(incArrow)			if (!_horizontal){				tracker.width = pixelSize - 1;				tracker.x = 0;			}			else{				tracker.height = pixelSize - 1;				tracker.y = 0;			}						redraw();		}				private function reInit(horizontal:Boolean) : void{			_horizontal = horizontal;						decArrow.setDirection((_horizontal == true) ? 2 : 1,pixelSize-1,decScroll);			incArrow.setDirection((_horizontal == true) ? 0 : 3,pixelSize-1,decScroll);						if (!_horizontal){				tracker.width = pixelSize - 1;				tracker.x = 0;			}			else{				tracker.height = pixelSize - 1;				tracker.y = 0;			}						redraw();		}				public function get horizontal() : Boolean{			return _horizontal;		}				public function set horizontal(value:Boolean) : void {			_horizontal = value;			reInit(value);		}				public function changeByPx(px:Number):void{			scrollValue += (_scrollSize/innerSize)*px		}				public function decScroll():void{			scrollValue = _scrollValue-15		}		public function incScroll():void{			scrollValue = _scrollValue+15		}				public function decScrollJump():void{			scrollValue = _scrollValue-_scrollViewable		}		public function incScrollJump():void{			scrollValue = _scrollValue+_scrollViewable		}		public function set scrollSize(h:Number):void{			_scrollSize = h;			_scrollValue = Math.max(Math.min(_scrollValue,_scrollSize-_scrollViewable),0);		}				public function set scrollViewable(h:Number):void{			_scrollViewable = h;			_scrollValue = Math.max(Math.min(_scrollValue,_scrollSize-_scrollViewable),0);		}				public function set scrollValue(h:Number):void{			if(h != _scrollValue){				_scrollValue = Math.max(Math.min(h,_scrollSize-_scrollViewable),0);				if(scrollListener != null){					scrollListener(_scrollValue)				}				redraw()			}		}				public function get scrollValue():Number{			return _scrollValue 		}						public function scroll(target:Function):void{			scrollListener = target;		}				private function get innerSize():Number{			if (!_horizontal)				return _height - pixelSize * 2;			else				return _width - pixelSize * 2;		}				public override function get width():Number{			return _width		}		public override function get height():Number{			return _height 		}						public function blur():void{			this.tracker.visible = false;			this.incArrow.visible = false;			this.decArrow.visible = false;			this.scrollbg.visible = false;		}				public function focus():void{			this.tracker.visible = true;			this.incArrow.visible = true;			this.decArrow.visible = true;			this.scrollbg.visible = true;		}				public function refresh():void{			redraw();		}				protected override function redraw():void{			if (!_horizontal)			{				tracker.height = Math.max(innerSize * _scrollViewable / _scrollSize,10);				tracker.y = Math.ceil(pixelSize + (_scrollValue / (_scrollSize-_scrollViewable) ) * (innerSize-tracker.height+2))							scrollbg.width = pixelSize-1				scrollbg.height = _height;				incArrow.y = _height - pixelSize + 2;				incArrow.x = 0;			}			else			{				tracker.width = Math.max(innerSize * _scrollViewable / _scrollSize,10);				tracker.x = Math.ceil(pixelSize + (_scrollValue / (_scrollSize - _scrollViewable)) * (innerSize - tracker.width + 2));								scrollbg.height = pixelSize - 1;				scrollbg.width = _width;				incArrow.x = _width - pixelSize + 2;				incArrow.y = 0;			}		}	}}